service: discogs-market-monitor

frameworkVersion: '2 || 3'

useDotenv: true

plugins:
  - serverless-webpack
  - serverless-step-functions

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.ts
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk

provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: ap-southeast-2

functions:
  handler:
    handler: src/index.handler
    memorySize: 256
    timeout: 900
    environment:
      DISCOGS_USER_TOKEN: ${ssm:/discogs-market-monitor/discogs_user_token}
      SENDGRID_API_KEY: ${ssm:/discogs-market-monitor/sendgrid_api_key}
      DISCOGS_USERNAME: ${ssm:/discogs-market-monitor/discogs_username}
      SHIPS_FROM: ${ssm:/discogs-market-monitor/ships_from}
      DESTINATION_EMAIL: ${ssm:/discogs-market-monitor/destination_email}
      SENDER_EMAIL: ${ssm:/discogs-market-monitor/sender_email}

stepFunctions:
  stateMachines:
    monitor:
      events:
        - schedule:
            rate: rate(12 hours)
            enabled: true
      definition:
        StartAt: MarketMonitor
        States:
          MarketMonitor:
            Type: Task
            Resource:
              Fn::GetAtt: [handler, Arn]
            Catch:
            - ErrorEquals: ["RequestsExceededError"]
              Next: MarketMonitor
              ResultPath: $.error
            - ErrorEquals: ["States.ALL"]
              Next: CatchAllFallback
            End: true
          CatchAllFallback:
            Type: Pass
            Result: "This is a catch all fallback"
            End: true